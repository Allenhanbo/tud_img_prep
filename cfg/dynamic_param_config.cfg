#!/usr/bin/env python
PACKAGE = "tud_img_prep"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

color_enum = gen.enum([
gen.const("Passthrough",         int_t, 0,  "..." ),
gen.const("BGR8",      int_t, 1,   "..." ),
gen.const("RGB8",    int_t, 2,   "..." ),
gen.const("MONO8",         int_t, 3,   "..." ),
],"Choose Color Encoding")

deinterlace_enum = gen.enum([
gen.const("FULL_INTERLACED",     int_t, 0, "Dont do anything, leave it interlaced"),
gen.const("HALF_CUT",       int_t, 1, "Just take Odd rows"),
gen.const("HALF_NEAREST",   int_t, 2,  "nearest-neighbor interpolation of the even rows from the odd ones"),
gen.const("HALF_LINEAR",    int_t, 3,  "bilinear interpolation of the even rows from the odd ones"),
gen.const("HALF_AREA",      int_t, 4,  "resampling using pixel area relation of the even rows from the odd ones"),
gen.const("HALF_CUBIC",     int_t, 5,  "bicubic interpolation over 4x4 pixel neighborhood of the even rows from the odd ones"),
gen.const("HALF_LANCZOS4",  int_t, 6,  "Lanczos interpolation over 8x8 pixel neighborhood of the even rows from the odd ones")
],"Set Deinterlace Method for deinterlacing the incoming image")

contrast_enum = gen.enum([
gen.const("NONE",            int_t, 0, "No contrast equalization"),
gen.const("OPENCV_EQUALIZEHIST", int_t, 1, "Use internal OpenCV function"),
gen.const("MANUAL",  int_t, 2,  " Manual equalization by using user defined contrast and brightness values"),
],"Set Equalization Method")

#################################################################
gen.add("node_on",              bool_t,   1, "Turn Node on",      True)
gen.add("color_encoding",       int_t,    0, "Choose color encoding",   3, 0, 3, edit_method=color_enum)
gen.add("deinterlace_method",   int_t,    0, "Deinterlace the image",   3, 0, 6, edit_method=deinterlace_enum)
gen.add("equalization_method",  int_t,    0, "Equalize the histrogram", 2, 0, 2, edit_method=contrast_enum)
gen.add("equalize_color",       bool_t,   1, "Equalize color channels", False)
gen.add("brightness",           double_t, 0, "...",                     -0.08, -1, 1)
gen.add("contrast",             double_t, 0, "...",                     -0.4, -1, 1)

gen.add("filter_median",        bool_t,   1, "Turn Gaussian Filter On", False)
gen.add("ksize_median",         int_t,    0, "...",                     1, 0, 10)

gen.add("filter_gaussian",      bool_t,   1, "Turn Median Filter On",   False)
gen.add("ksize_gaussian",       int_t,    0, "...",                     1, 0, 10)
gen.add("sigmaX_gaussian",      double_t, 0, "...",                     3, 0, 200)
gen.add("sigmaY_gaussian",      double_t, 0, "...",                     3, 0, 200)

gen.add("filter_bilateral",     bool_t,   1, "Turn Bilateral Filter On",False)
gen.add("ksize_bilateral",      int_t,    0, "...",                     1, 0, 10)
gen.add("sigmaX_bilateral",     double_t, 0, "...",                     3, 0, 200)
gen.add("sigmaY_bilateral",     double_t, 0, "...",                     3, 0, 200)

exit(gen.generate(PACKAGE, "tud_img_prep", "dynamic_param_config"))
